unit uSMTP;

interface
uses IdSMTP, IdSSLOpenSSL, IdMessage, IdText, IdAttachmentFile,
  IdExplicitTLSClientServerBase,Winapi.Windows, Winapi.Messages,
  System.SysUtils, System.Variants, System.Classes,Dialogs,Forms;

function EnviaEmail(Assunto:String;Destinatario:String;AnexoXML:String;Dados: TStringList):Boolean;
implementation
function EnviaEmail(Assunto:String;Destinatario:String;AnexoXML:String;Dados: TStringList):Boolean;
var
  // variáveis e objetos necessários para o envio
  IdSSLIOHandlerSocket: TIdSSLIOHandlerSocketOpenSSL;
  IdSMTP: TIdSMTP;
  IdMessage: TIdMessage;
  IdText: TIdText;
  sAnexo: string;
begin
  // instanciação dos objetos
  IdSSLIOHandlerSocket := TIdSSLIOHandlerSocketOpenSSL.Create(Application);
  IdSMTP := TIdSMTP.Create(Application);
  IdMessage := TIdMessage.Create(Application);

  try
    // Configuração do protocolo SSL (TIdSSLIOHandlerSocketOpenSSL)
    IdSSLIOHandlerSocket.SSLOptions.Method := sslvSSLv23;
    IdSSLIOHandlerSocket.SSLOptions.Mode := sslmClient;

    // Configuração do servidor SMTP (TIdSMTP)
    IdSMTP.IOHandler := IdSSLIOHandlerSocket;
    IdSMTP.UseTLS := utUseImplicitTLS;
    IdSMTP.AuthType := satDefault;
    IdSMTP.Port := 465;
    IdSMTP.Host := 'smtp.gmail.com';
    IdSMTP.Username := 'cadastroinfosistemas@gmail.com';
    IdSMTP.Password := 'marcus159';

    // Configuração da mensagem (TIdMessage)
    IdMessage.From.Address := 'cadastroinfosistemas@gmail.com';
    IdMessage.From.Name := 'Cadastro InfoSistemas - Marcus Melgaço';
    IdMessage.ReplyTo.EMailAddresses := IdMessage.From.Address;
    IdMessage.Recipients.Add.Text := Destinatario;
    IdMessage.Subject := Assunto;
    IdMessage.Encoding := meMIME;

    // Configuração do corpo do email (TIdText)
    IdText := TIdText.Create(IdMessage.MessageParts);
    IdText.Body.Add('Olá, esta é uma mensagem Automática, portanto não é necessário responder!');
    IdText.Body.Add('Seguem os Dados Do Novo Cliente Cadastrado:');
    IdText.Body.Add('*NOME: '+Dados[0]);
    IdText.Body.Add('*IDENTIDADE: '+Dados[1]);
    IdText.Body.Add('*CPF: '+Dados[2]);
    IdText.Body.Add('*TELEFONE: '+Dados[3]);
    IdText.Body.Add('*EMAIL: '+Dados[4]);
    IdText.Body.Add(' °ENDEREÇO');
    IdText.Body.Add('   *CEP: '+Dados[5]);
    IdText.Body.Add('   *LOGRADOURO: '+Dados[6]);
    IdText.Body.Add('   *NUMERO: '+Dados[7]);
    IdText.Body.Add('   *COMPLEMENTO: '+Dados[8]);
    IdText.Body.Add('   *BAIRRO: '+Dados[9]);
    IdText.Body.Add('   *CIDADE: '+Dados[10]);
    IdText.Body.Add('   *ESTADO: '+Dados[11]);
    IdText.Body.Add('   *PAIS: '+Dados[12]);
    IdText.Body.Add('');
    IdText.Body.Add('Em Anexo, Se Encontra o XML Com os Dados do Cliente.');
    IdText.Body.Add('');
    IdText.Body.Add('|-| Cadastro de Clientes InfoSistemas - Marcus Melgaço |-|');

    IdText.ContentType := 'text/plain; charset=iso-8859-1';

    // Opcional - Anexo da mensagem (TIdAttachmentFile)
    sAnexo := AnexoXML;
    if FileExists(sAnexo) then
    begin
      TIdAttachmentFile.Create(IdMessage.MessageParts, sAnexo);
    end;

    // Conexão e autenticação
    try
      IdSMTP.Connect;
      IdSMTP.Authenticate;
    except
      on E:Exception do
      begin
        MessageDlg('Erro na conexão ou autenticação: ' +
          E.Message, mtWarning, [mbOK], 0);
        Exit;
      end;
    end;

    // Envio da mensagem
    try
      IdSMTP.Send(IdMessage);
      MessageDlg('Mensagem enviada com sucesso!', mtInformation, [mbOK], 0);
      Result:= True;
    except
      On E:Exception do
      begin
        MessageDlg('Erro ao enviar a mensagem: ' +
          E.Message, mtWarning, [mbOK], 0);
          Result:= False;
      end;
    end;
  finally
    // desconecta do servidor
    IdSMTP.Disconnect;
    // liberação da DLL
    UnLoadOpenSSLLibrary;
    // liberação dos objetos da memória
    FreeAndNil(IdMessage);
    FreeAndNil(IdSSLIOHandlerSocket);
    FreeAndNil(IdSMTP);
    FreeAndNil(Dados);
  end;
end;
end.
